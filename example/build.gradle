plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'com.github.johnrengelman.shadow' version '8.1.0'
}

repositories {
    mavenCentral()
}

ext {
    jlineVersion = '3.21.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

dependencies {
    implementation project(':luajava')
    implementation project(':lua51')
    implementation project(':lua52')
    implementation project(':lua53')
    implementation project(':lua54')
    implementation project(':luajit')
    implementation project(':example:suite')
    implementation project(path: ':lua51', configuration: 'desktopNatives')
    implementation project(path: ':lua52', configuration: 'desktopNatives')
    implementation project(path: ':lua53', configuration: 'desktopNatives')
    implementation project(path: ':lua54', configuration: 'desktopNatives')
    implementation project(path: ':luajit', configuration: 'desktopNatives')
    implementation 'info.picocli:picocli:4.7.1'
    implementation 'org.antlr:antlr4-runtime:4.11.1'
    implementation "org.jline:jline-reader:$jlineVersion"
    implementation "org.jline:jline-console:$jlineVersion"
    implementation "org.jline:jline-terminal:$jlineVersion"
    implementation "org.jline:jline-builtins:$jlineVersion"
    implementation "org.jline:jline-terminal-jansi:$jlineVersion"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.mockito:mockito-core:4.11.0'
}

test {
    useJUnitPlatform()

    javaLauncher.set(javaToolchains.launcherFor {
        languageVersion.set(JavaLanguageVersion.of(11))
    })

    jvmArgs ["--illegal-access=debug"]

    jacoco {
        destinationFile = project(':').buildDir.toPath().resolve('jacoco/test.exec').toFile()
    }

}

application {
    mainClassName = 'party.iroiro.luajava.Console'
}
