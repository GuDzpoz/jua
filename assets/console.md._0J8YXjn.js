import{s as r,y as c,ad as d,o as n,c as l,I as o,w as u,k as p,g as m,a5 as i,D as h}from"./chunks/framework.SYT71_kc.js";const _={__name:"Asciinema",props:["file"],setup(t){const a=r(null),s=t;return c(()=>{d(()=>import("./chunks/index.QkzgUkjl.js"),[]).then(e=>e.create(s.file,a.value,{rows:12}))}),(e,g)=>(n(),l("div",{ref_key:"cinema",ref:a},null,512))}},f=i('<h1 id="interactive-console" tabindex="-1">Interactive Console <a class="header-anchor" href="#interactive-console" aria-label="Permalink to &quot;Interactive Console&quot;">​</a></h1><p>We build a tiny console application with <a href="https://github.com/jline/jline3" target="_blank" rel="noreferrer">JLine3</a> every release. You may download the <code>example-all.jar</code> from our <a href="https://github.com/gudzpoz/luajava/releases" target="_blank" rel="noreferrer">Release page</a>. Or you can get the lastest snapshot from <a href="https://github.com/gudzpoz/luajava/actions/workflows/build-natives.yml" target="_blank" rel="noreferrer">our workflow artifacts</a>: choose the lastest build and find the <code>example</code> artifact.</p><p>The jar bundles desktop natives with it, so you should be able to play around with it on your own computer.</p>',3),b=i(`<p><code>Lua Version</code> can be any of <code>5.1</code>, <code>5.2</code>, <code>5.3</code>, <code>5.4</code>, <code>luaj</code> or <code>jit</code>.</p><h2 id="built-in-examples" tabindex="-1">Built-In Examples <a class="header-anchor" href="#built-in-examples" aria-label="Permalink to &quot;Built-In Examples&quot;">​</a></h2><p>We bundle several examples with the console JAR, which you may obtain using <code>require</code>.</p><ol><li><code>require(&#39;luajava.ansiThreadedHelloWorld&#39;)</code>: A simple Hello World with Java threads and Ansi printing.</li><li><code>require(&#39;luajava.awtTest&#39;)()</code>: Sets up an AWT frame to execute Lua commands.</li><li><code>require(&#39;luajava.simpleLuaFile&#39;)</code>: Executes a simple Lua file.</li><li><code>require(&#39;luajava.swingTest&#39;)()</code>: Sets up a Swing frame to execute Lua commands.</li><li><code>require(&#39;luajava.testMemory&#39;)</code>: Tests garbage collecting a bunch of Java objects and created threads.</li><li><code>require(&#39;luajava.wrongLuaFile&#39;)</code>: Tests loading a malformed Lua file.</li><li><code>luajava = require(&#39;suite.luajava-compat&#39;)</code>: Wraps the <code>java</code> API into the original <code>luajava</code> API.</li></ol><p>Some of these examples return a function so that you may execute them as many times as you wish:</p><ul><li><code>luajava.awtTest</code></li><li><code>luajava.swingTest</code></li><li><code>luajava.testMemory</code></li></ul><h2 id="command-line-options" tabindex="-1">Command Line Options <a class="header-anchor" href="#command-line-options" aria-label="Permalink to &quot;Command Line Options&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Usage: &lt;main class&gt; [-t] [-l=&lt;lua&gt;] [-f=&lt;file&gt; | -e=&lt;expression&gt;]</span></span>
<span class="line"><span>  -e, --expr=&lt;expression&gt;   The Lua expression to run</span></span>
<span class="line"><span>  -f, --file=&lt;file&gt;         The Lua file to run</span></span>
<span class="line"><span>  -l, --lua=&lt;lua&gt;           Specify the Lua version</span></span>
<span class="line"><span>  -t, --test                Run built-in tests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,8),y=JSON.parse('{"title":"Interactive Console","description":"","frontmatter":{},"headers":[],"relativePath":"console.md","filePath":"console.md","lastUpdated":1724853561000}'),v={name:"console.md"},w=Object.assign(v,{setup(t){return(a,s)=>{const e=h("ClientOnly");return n(),l("div",{"data-pagefind-body":!0},[f,o(e,null,{default:u(()=>[o(_,{file:p(m)("/example.cast")},null,8,["file"])]),_:1}),b])}}});export{y as __pageData,w as default};
