import{_ as a,o as s,c as e,a5 as i}from"./chunks/framework.SYT71_kc.js";const k=JSON.parse('{"title":"Java 9 Platform Module System","description":"","frontmatter":{},"headers":[],"relativePath":"jpms.md","filePath":"jpms.md","lastUpdated":1724853561000}'),n={name:"jpms.md"},l=i(`<h1 id="java-9-platform-module-system" tabindex="-1">Java 9 Platform Module System <a class="header-anchor" href="#java-9-platform-module-system" aria-label="Permalink to &quot;Java 9 Platform Module System&quot;">​</a></h1><p>The <a href="https://en.wikipedia.org/wiki/Java_Platform_Module_System" target="_blank" rel="noreferrer">Java Platform Module System</a> is a built-in way to express relationships between Java <em>modules</em>, starting from Java 9.</p><p>To use LuaJava in your Java module, simply place the following <code>requires</code> statements in your <code>module-info.java</code>:</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java.module {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    requires</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> party.iroiro.luajava;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Replace lua51 with your Lua version: lua51/lua52/lua53/lua54/luajit/luaj</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    requires</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> party.iroiro.luajava.lua51;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;Modules&quot;">​</a></h2><p>All the modules are either <a href="https://openjdk.org/projects/jigsaw/spec/sotms/#automatic-modules" target="_blank" rel="noreferrer">automatic modules</a> or <a href="https://openjdk.org/projects/jigsaw/spec/sotms/#unnamed-modules" target="_blank" rel="noreferrer">unnamed modules</a>.</p><ol><li>The <code>party.iroiro.luajava</code> module is an automatic module, wrapping around the <code>party.iroiro.luajava:luajava</code> artifact.</li><li>The <code>party.iroiro.luajava.lua*</code> modules are automatic ones, wrapping Java side bindings for Lua binaries.</li><li>The native binary JARs are put into the unnamed module.</li></ol>`,7),t=[l];function r(o,p,d,u,m,h){return s(),e("div",{"data-pagefind-body":!0},t)}const b=a(n,[["render",r]]);export{k as __pageData,b as default};
