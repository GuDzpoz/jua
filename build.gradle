group 'party.iroiro.luajava'
version(System.getenv('IS_RELEASE') == 'true' ? '3.3.0' : '3.3.0-SNAPSHOT')

buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath 'org.javamodularity:moduleplugin:1.8.12'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

subprojects { it ->
    if (['luajava', 'lua51', 'lua52', 'lua53', 'lua54', 'luajit', 'jsr223'].contains(it.name)) {
        apply plugin: 'java'
        apply plugin: 'org.javamodularity.moduleplugin'

        java {
            // sourceCompatibility should not be set together with --release option

            withSourcesJar()
            withJavadocJar()
        }

        modularity {
            mixedJavaRelease 8
        }
    } else if (!['android', 'android-test'].contains(it.name)) {
        apply plugin: 'java'

        java {
            toolchain {
                languageVersion = JavaLanguageVersion.of(8)
            }

            withSourcesJar()
            withJavadocJar()
        }
    }
}

ext {
    jdk = JavaVersion.current().majorVersion
    jdkJavadoc = "https://docs.oracle.com/javase/8/docs/api/"
    println "JDK Javadoc link for this build is ${rootProject.jdkJavadoc}"
}

apply from: 'publish.gradle'
apply from: 'jacoco.gradle'

task allJavadoc(type: Javadoc) {
    Set<String> projects = [
            'lua51',
            'lua52',
            'lua53',
            'lua54',
            'luajit',
            'luajava',
    ]
    source subprojects
            .findAll { projects.contains(it.name) }
            .collect { it.sourceSets.main.allJava }
    classpath = files(subprojects.findAll { projects.contains(it.name) }
            .collect { it.sourceSets.main.compileClasspath })
    exclude(
            '**/party/iroiro/luajava/util/**',
            '**/party/iroiro/luajava/cleaner/**',
    )
    destinationDir = file("${buildDir}/docs/javadoc")
}
